<?xml version = "1.0" encoding = "utf-8"?>
<project name="WebProtege" default="usage" basedir=".">

	<property file="local.properties" />
	<property environment="env" />
	<property name="catalina.home" location="${env.CATALINA_HOME}" />
	<property name="gwt.args" value="" />

	<property name="war.name" value="webprotege" />
	<property name="jar.name" value="webprotege-lib.jar" />

	<property name="src" location="./src" />
	<property name="test.src" location="test" />
	<property name="etc" location="./etc" />
	<property name="war.template" location="./war" />
	<property name="lib" location="${war.template}/WEB-INF/lib" />
	<property name="test.lib" location="test-lib" />
	
	<property name="build" location="./build" />
	<property name="classes" location="${build}/classes" />
	<property name="war" location="${build}/war" />

	<property name="api.docs" location="docs" />
	
	<property name="build.properties" location="build.properties" />
	

	<!-- 
     #  ********** Finding Libraries *************
     -->

	<target name="classpathAndCheckLibs">
		<condition property="libs.found">
			<and>
				<available file="${gwt.dir}/gwt-user.jar" type="file" />
				<available file="${gwt.dir}/gwt-dev.jar" type="file" />
			</and>
		</condition>
		<path id="project.classpath">
			<pathelement location="${gwt.dir}/gwt-user.jar" />
			<fileset dir="${gwt.dir}" includes="gwt-dev*.jar"/>
			<!-- Add any additional non-server libs (such as JUnit) -->
			<fileset dir="${lib}" />
		</path>
	</target>


	<target name="checkLibsAndReport" depends="classpathAndCheckLibs" unless="libs.found">
		<echo message="Missing GWT libraries.  See the readme.txt" />
		<echo message="for the location of the GWT libraries and update the" />
		<echo message="local.properties file to point to these locations." />
		<echo message="Use the -v option to ant to see what jars are missing." />
		<fail message="missing GWT libraries" />
	</target>

	
	<!-- 
    #   ********** Initialization and staging *************
    -->

	<target name="init">
		<tstamp>
			<format property="build.time" pattern="MM/dd/yyyy hh:mm aa" />
		</tstamp>
		<mkdir dir="${build}" />
		<mkdir dir="${classes}" />
		<condition property="set.if.deploy.in.root">
			<equals arg1="${deploy.in.root}" arg2="true" />
		</condition>
		<available property="alt.war.template.exists" file="${alt.war.template}" type="dir" />
		<available property="alt.projects.template.exists" file="${alt.war.template}/projects" type="dir" />
		
		<echo message="******************************************" />
		<echo message="Using Java from: JAVA_HOME=${env.JAVA_HOME}" />
		<echo message="Java version: ${ant.java.version}" />
		<echo message="Using GWT from: ${gwt.dir}" />
		<echo message="Additional GWT arguments for the GWT compile.java: ${gwt.args}" />
		<echo message="Output WAR file in: ${build}/${war.name}.war" />
		<echo message="******************************************" />
		
	</target>


	<!-- 
          Workaround for gwt eclipse plugin bug.  

          It appears that the gwt eclipse plugin writes some files to
          the ./war area.  These files are dropped from the copy to
          ensure a consistent and predictable build.  This could cause
          trouble later if someone commits some of these files and
          they don't get installed.
       -->
	<target name="copy.war" depends="checkLibsAndReport, init">
		<mkdir dir="${war}" />
		<copy todir="${war}">
			<fileset dir="${war.template}">
				<exclude name="webprotege/**" />
				<exclude name="webprotege" />
				<exclude name="authenticate/**" />
				<exclude name="authenticate" />
				<exclude name="WEB-INF/classes/**" />
				<exclude name="WEB-INF/classes" />
				<exclude name="WEB-INF/deploy/**" />
				<exclude name="WEB-INF/deploy" />
				<exclude name="WEB-INF/lib/gwt-servlet.jar" />
				<exclude name="WEB-INF/lib/gwt-servlet-deps.jar" />
			</fileset>
		</copy>
	</target>

	
	<target name="stage.war" depends="copy.war">
		<antcall target="replace.projects" />
		<antcall target="copy.alt.war.template" />
	</target>

	
	<target name="replace.projects" if="alt.projects.template.exists">
		<delete dir="${war}/projects" />
	</target>

	
	<target name="copy.alt.war.template" if="alt.war.template.exists">
		<copy todir="${war}" overwrite="true">
			<fileset dir="${alt.war.template}" />
		</copy>
	</target>

	
	<!-- 
    #   ********** Compilation *************
    -->

	<target name="compile.java" depends="init, checkLibsAndReport" description="Compile java source to bytecode">
		<mkdir dir="war/WEB-INF/classes" />
		<javac srcdir="${src}" includes="**" encoding="utf-8" includeAntRuntime="false"
			destdir="${classes}" nowarn="true" debug="true" debuglevel="lines,vars,source">
			     <classpath refid="project.classpath" /> 
		</javac>
		<copy todir="${classes}">
			<fileset dir="${src}">
				<include name="**/*" />
				<exclude name="**/*.java" />
				<exclude name="**/MANIFEST.MF" />
				<exclude name="**/manifest.mf" />
			</fileset>
		</copy>
	</target>


	<target name="webprotege.lib" depends="stage.war, compile.java">
		<jar file="${war}/WEB-INF/lib/${jar.name}" basedir="${classes}" />
	</target>

	<target name="check.js.compiled">
		<uptodate property="js.up.to.date" targetfile="${war}/BUILT">
			<srcfiles dir="${src}" />
		</uptodate>
	</target>


	<target name="compile.js" depends="compile.java,check.js.compiled, stage.war" unless="js.up.to.date" 
			description="GWT compile to JavaScript (production mode)">
		<java failonerror="true" fork="true" classname="com.google.gwt.dev.Compiler">
			<classpath>
				<pathelement location="${src}"/>
				<pathelement location="${classes}"/>
				<path refid="project.classpath"/>
				<pathelement location="${gwt.dir}/validation-api-1.0.0.GA.jar" />
				<pathelement location="${gwt.dir}/validation-api-1.0.0.GA-sources.jar" />
			</classpath>

			<!-- add jvmarg -Xss16M or similar if you see a StackOverflowError -->
			<jvmarg value="-Xmx1256M"/>
			
			<arg line="-war"/>
			<arg value="${war}"/>
			
			<arg line = "-logLevel"/>
			<arg value = "INFO"/>
			
			<!-- Additional arguments like -style PRETTY or -logLevel DEBUG -->
			<arg line="${gwt.args}"/>
			
			<arg value="${gwt.module.1}" />			
			<arg value="${gwt.module.2}" />
		</java>
		<touch file="${war}/BUILT" />
		<antcall target="copy.rpc.in.war" />
	</target>


	<target name="copy.rpc.in.war" if="set.if.deploy.in.root">
		<echo message="Copying the rpc files in war (workaround for GWT + proxy bug)" />
		<copy todir="${war}">
			<fileset dir="${war}/${gwt.module.1.short}">
				<include name="**/*.rpc" />
			</fileset>
		</copy>
		<copy todir="${war}">
			<fileset dir="${war}/${gwt.module.2.short}">
				<include name="**/*.rpc" />
			</fileset>
		</copy>
	</target>


	<!-- 
     #  ********** Build war and deploy *************
     -->

	<target name="war" depends="webprotege.lib,compile.js">
		<delete file="${war}/WEB-INF/lib/gwt-user.jar" />

		<copy file="${gwt.dir}/gwt-servlet.jar" todir="${war}/WEB-INF/lib" />
		<copy file="${gwt.dir}/gwt-servlet-deps.jar" todir="${war}/WEB-INF/lib" />
		
		<copy file="webprotege.properties" todir="${war}" failonerror="false" />
		
		<copy todir="${war}/etc" failonerror="false">
		    <fileset dir="${etc}"/>
		</copy>
				
		<copy file="${build.properties}" todir="${war}" />
		
		<war destfile="${build}/${war.name}.war" basedir="${war}" />
		<antcall target="increment.build.number" />
	</target>

	
	<target name="deploy">
		<echo message="If runnning with sudo, you may need to use the -E option to preserve the environment vars." />
		<echo message="Example:   sudo -E ant deploy" />
		<echo message="Deploying to: ${catalina.home}" />
		<delete dir="${catalina.home}/webapps/${war.name}" />
		<copy tofile="${catalina.home}/webapps/${war.name}.war" file="${build}/${war.name}.war" />
	</target>

	
	<target name="update" depends="webprotege.lib, compile.js">
		<copy todir="${catalina.home}/webapps/${war.name}">
			<fileset dir="${war}">
				<exclude name="projectConfigurations/*" />
				<exclude name="projects/**" />
				<exclude name="WEB-INF/web.xml" />
			</fileset>
		</copy>
	</target>

	<target name="increment.build.number">
		<propertyfile file="${build.properties}">
			<entry key="build.number" type="int" operation="+" default="0"/>
		</propertyfile>
		<property file="${build.properties}"/>
		<echo message="Build number is ${build.number}"/>
	</target>
	
	<!-- 
     #  ********** Running *************
     -->

	<target name="devmode" depends="webprotege.lib,stage.war" description="Run development mode">
		<java failonerror="true" fork="true" classname="com.google.gwt.dev.DevMode">
			<classpath>
				<path refid="project.classpath" />
				<pathelement path="${classes}" />
				<pathelement path="${src}" />
				<pathelement location="/work/tools/gwt-2.5.1/validation-api-1.0.0.GA.jar" />
				<pathelement location="/work/tools/gwt-2.5.1/validation-api-1.0.0.GA-sources.jar" />
			</classpath>

			<jvmarg value="-Xmx1256M"/>
			<jvmarg value="-agentlib:jdwp=transport=dt_socket,address=8100,server=y,suspend=n" />
			<jvmarg value="${extra.devmode.jvm.arg}" />

			<arg value="-war" />
			<arg value="${war}" />
			<arg value="${gwt.module.1}" />
			<arg value="-startupUrl" />
			<arg value="${gwt.html.target}" />
			<!-- Additional arguments like -style PRETTY or -logLevel DEBUG -->
			<arg line="${gwt.args}"/>

		</java>
	</target>

	<!--
     #  ********** Test *************
     -->
	<target name="build-test" depends="stage.war,compile.java"
		description="test the project" >
            <javac srcdir            = "${test.src}"
		   destdir           = "${classes}"
		   encoding          = "UTF-8"
		   includeantruntime = "false">
  	        <classpath>
		    <path refid="project.classpath" />
		    <!-- pull in all jar files in ${test.lib}
                         this includes JUnit
                     -->
	            <fileset dir="${test.lib}">
		        <include name="**/*.jar"/>
		    </fileset>
		</classpath>
	    </javac>
	</target>

	<target name="test" depends="build-test"
		description="run the project tests" >
            <junit printsummary="yes" fork="yes" haltonfailure="yes">
  	        <classpath>
		    <path refid="project.classpath" />
		    <pathelement path="${classes}" />
		    <!-- pull in all jar files in ${test.lib}
                         this includes JUnit
                     -->
	            <fileset dir="${test.lib}">
		        <include name="**/*.jar"/>
		    </fileset>
		</classpath>
 
		<formatter type="plain"/>
		<batchtest>
                  <fileset dir="${classes}">
		    <include name="**/*TestCase.class" />
                  </fileset>
		</batchtest>
	    </junit>
	</target>

	<!--
     #  ********** Documentation *************
     -->
	<target name="doc">
  	    <javadoc packagenames="edu.standford.*"
		     defaultexcludes="yes"
		     destdir="${api.docs}"
		     author="true"
		     version="true"
		     use="true"
		     windowtitle="WebProtégé API">
	      <fileset dir="${src}" casesensitive="yes">
		  <include name="**/*.java"/>
		  <exclude name="**/*Test*"/>
	      </fileset>
	      <doctitle><![CDATA[<h1>WebProtégé API</h1>]]></doctitle>
	      <!-- <bottom><![CDATA[<i>Copyright &#169; 2011&emdash;2013 Protégé authors. All Rights Reserved.</i>]]></bottom> -->
	    </javadoc>
	</target>
	
	<!-- 
     #  ********** Usage *************
     -->

	<target name="usage">
		<echo message="war - makes the webprotege war file" />
		<echo message="deploy - makes a war file and deploys it to ${CATALINA_HOME}" />
		<echo message="devmode - runs webprotege in devMode mode with remote debug support" />
		<echo message="stage.war - makes a copy of the war directory in ./build/war" />
		<echo message="test - builds and runs all tests" />
		<echo message="doc - builds the API documentation" />
		<echo message="usage - prints this help message" />
		<echo message="clean - cleans the build directory" />
	</target>

	<!-- 
     #  ********** Clean *************
     -->
	<target name="clean">
		<delete dir="${build}" />
	</target>

</project>
