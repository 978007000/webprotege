#* @vtlvariable name="importedPackages" type="java.util.Collection<java.lang.String>" *#
#* @vtlvariable name="portlet" type="edu.stanford.bmir.protege.web.server.codegen.PortletDescriptor" *#

package edu.stanford.bmir.protege.web.client.portlet;

import edu.stanford.bmir.protege.web.client.portlet.PortletFactory;
import edu.stanford.bmir.protege.web.shared.PortletId;

import java.util.HashMap;
import java.util.Map;

import com.google.common.base.Optional;
import com.google.inject.Provider;
import edu.stanford.bmir.protege.web.client.portlet.WebProtegePortlet;

import javax.inject.Inject;

import static com.google.common.base.Preconditions.checkNotNull;



#foreach($pkg in $importedPackages)
import $pkg.*;
#end

class PortletFactoryGenerated implements PortletFactory {

    private Map<PortletId, Provider<? extends WebProtegePortlet>> id2PresenterMap = new HashMap<>();

    @Inject
    public PortletFactoryGenerated(
        #foreach($desc in $descriptors)
                Provider<$desc.simpleName> providerOf_$desc.simpleName#if( $foreach.hasNext ),
        #else

        #end
        #end
    ) {
        #foreach($desc in $descriptors)
            id2PresenterMap.put(new PortletId("${desc.portletPluginId.id}"), providerOf_$desc.simpleName);
        #end
    }

    public Optional<WebProtegePortlet> createPortlet(PortletId portletId) {
        checkNotNull(portletId);
        Provider<? extends WebProtegePortlet> portletProvider = id2PresenterMap.get(portletId);
        if (portletProvider == null) {
            return Optional.<WebProtegePortlet>absent();
        }
        else {
            return Optional.of(portletProvider.get());
        }
    }
}
